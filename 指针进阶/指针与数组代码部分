1 数组概述
数组是用索引访问的同质元素的连续集合。这里说的连续是数组中的元素在内存中是相邻的
1.1创建一维数组
#include <stdio.h>
int main() {
	int vector[5]={0};
	printf("%d", sizeof(vector)/sizeof(int));//打印数组元素数量
	return 0;
}

1.2 二维数组
#include <stdio.h>
int main() {
    int matrix[2][3]={{1,2,3},{4,5,6}};
    for(int i=0; i<2; i++)
    {
        printf("&matrix[%d]:%p sizeof(matrix[%d]):%d\n",i,&matrix[i],i,sizeof(matrix[i])); 
    //二维数组可以看作数组的数组，打印每个元素的地址和大小
    }
    return 0;
}
1.3 多维数组
#include <stdio.h>
int main() {
    int arr3d[3][2][4]={{{1,2,3,4},{5,6,7,8}},{{9,10,11,12},{13,14,15,16}},{{17,18,19,20},{21,22,23,24}}};
    return 0;
}

2.1 指针表示法和数组
#include <stdio.h>
int main() {
    int vector[5] = {1,2,3,4,5};
    int* pv = vector;
    printf("%p\n",vector);
    printf("%p\n",&vector[0]);//与上一条语句等价。
    return 0;
}
实际上，指针可以使用数组下标，pv[i]等价*(pv+i)

数组与指针的差别 vector[i]表示偏移并解引，*(vector+i)表示相加并解引。生成的机器码不一样。
同时，数组名不能作为左值存在。

2.3 malloc创建一维数组
#include <stdio.h>
#include <stdlib.h>
int main() {
    int* pv = (int*)malloc(sizeof(int)*5);
    for(int i=0; i<5; i++)
    {
        *(pv+i) = i+1;//解引操作符的优先级比加操作高
    }
    free(pv);
    return 0;
}
2.4 realloc调整数组长度
/*为了说明realloc函数，我们会实现一个从标准输入读取字符并放入缓冲区的函数，缓冲区会包含除回车以外的所有字符。我们使用realloc函数为








