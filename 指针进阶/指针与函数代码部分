事实上，我们必须先声明一个函数，然后定义，然后再调用，下面的内容仅展示核心思想。
//2.1
#include <stdio.h>
int main()
{	int n1 = 5;
	int n2 = 10;
	swapWithPointers(&n1,&n2);
	return 0 ;	 
}
void swapWithPointers(int* pnum1, int* pnum2)
{
	int temp;
	temp = *pnum1;
    *pnum1 = *pnum2;
    *pnum2 = temp;
}

//2.2
//需要注意的是，如果不使用指针传递数据，那么交换就不会发生。
void swap(int num1, int num2)
{   int temp;
    temp = num1;
    num1 = num2;
    num2 = temp;
}
int main()
{   int n1  = 5;
    int n2 = 10;
    swap(n1,n2);
    return 0 ;
}//没有发生交换的原因是num1和num2保存的只是实参的副本。修改num1，实参n1不会变化。修改形参不会改变实参。

//2.3
void passingAddressofConstant(const int* num1, int* num2)
{
	*num2=*num1;
}
int main()
{   const int limit = 100;
    int result  = 5;
	passingAddressofConstant(&limit,&result);
    return 0 ;
}//如果不希望数据被修改，就要传递给指向常量的指针。在函数内，我们不能修改通过指向常量的指针传进来的值。

//2.4返回指针
#include <stido.h>
#include <stdlib.h>
int* allocateArray(int size,int value)

int* allocateArray(int size,int value)
{
	int* arr = (int*)malloc(size*sizeof(int));
	for( i=0; i<size; i++)
	{
		arr[i] = value;
	}
	return arr;
}
int main()
{	int* vector = allocateArray(5,0);
	for(int i=0; i<5; i++)
	{
		printf("%d\n",vector[i]);
	}
	free(vector);
	return 0 ;
}//函数返回指针时可能存在几个潜在的问题：返回无效地址，返回局部变量的指针，返回未初始化的指针，返回指针但未释放内存。

//2.5局部数据指针

int* allocateArray(int size,int value)
{
	int arr[size] ;
	for( i=0; i<size; i++)
	{
		arr[i] = value;
	}
	return arr;
}
int main()
{	int* vector = allocateArray(5,0);
	for(int i=0; i<5; i++)
	{
		printf("%d\n",vector[i]);
	}
	return 0 ;
}//如果返回局部变量的指针可能导致数组数据被覆写！

improve：把arr变量声明为static类型，这样变量的作用域限制在函数内部，但是分配在栈帧外面，避免其他函数覆写变量值。
但是每次调用allocatearry函数都会重复利用这个数组。这样相当于每次都把上次调用的结果覆盖掉，此外，静态数组必须声明为固定长度，
这样会限制函数处理变长数组的能力。

//2.6传递空指针
将指针传递给函数时，使用之前判断它是否为空是个好习惯
if(arr != NULL){	statement;
}
//2.7传递指针的指针
void allocateArray(int** arr, int size, int value)
{
	*arr = (int*)malloc(size*sizeof(int));
	if(arr!= NULL)
	{
		for(int i=0; i<size; i++)
		{
			*(*arr+i) = value;
		}
	}
}
int main()
{	int* vector = NULL;
	allocateArray(&vector,5,45);
	return 0;
}

//3.1 3.2 声明函数指针、使用函数指针
int (*foo)(int);//表明这是一个函数指针，这个函数的输入、输出都是int
int square(int n)
{	
	return n*n;
}

int main()
{	int s = 5;
	foo = square;
	printf("%d is square of %d",foo(s),s);
	return 0 ;
}

//3.3 传递函数指针
int add(int n1, int n2)
{
	return n1+n2;
}

int sub(int n1, int n2)
{
	return  n1-n2;
}

typedef int (*foo)(int,int);//foo:函数指针类型
int compute(foo operation, int n1, int n2)
{
	return(operation(n1,n2));
}

int main()
{
	int a = compute(add,5,6);
	int b = compute(sub,5,6);
	printf("%d\n%d",a,b);
}

//3.4 返回函数指针

foo select(char opcode)
{
	switch(opcode){
		case '+':
			return add;
		case '-':
			return sub;
	}
}

int evaluate(char opcode, int num1, int num2)
{	
	foo operation = select(opcode);
	return operation(num1, num2);
}

int main()
{
printf("%d\n",evaluate('+',5,6));
printf("%d\n",evaluate('-',5,6));
}

//3.5 使用函数指针数组
/* 函数指针数组可以根据某些条件选择要执行的函数*/
typedef int(*operation)(int, int);
operation operations[128] = {NULL};
//等价于 int (*operations[128])(int, int) = {NULL};
void initializeOpertionsarray{
	operations['+'] = add;
	operations['-'] = subtract;
}
int evaluateArray(char opcode, int n1, int n2)
{	operation operation;
	operation = operations[opcode]
	return operation(n1, n2)
}

//测试函数
initializeOperationsarray();
printf("%d\n",evaluateArray('+',5,6));
printf("%d\n",evaluateArray('-',5,6));

//3.6 比较函数指针
相等和不相等操作符来比较函数指针
//3.7 略


		















