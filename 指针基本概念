#include <stdio.h>
//1.1 指针的声明
int main()
{	//声明指针
	int num = 0;
	int* pi = &num;
	printf("address of num:%p pi:%p\n", &num, &pi);//将值显示为大写十六进制,并展示完整16位
	return 0; 
}

//1.2 解引用操作符
int main()
{	
	int num = 5;
	int* pi = &num;
	printf("%d\n", *pi);//以指针变量的内容作为地址访问指向对象的内容（解引指针）
	*pi = 200;
	printf("%d\n", *pi);//对指向的变量进行赋值
	return 0;
}

//1.3 空指针
int main()
{	//NULL被赋值给指针意味者指针不指向任何东西。
	//null指针和未初始化的指针不同，未初始化的指针可能包含任何值，而包含null的指针不会引用内存中的任何地址
	int* pi = NULL;
	printf("%p", pi);
	return 0;
 }
//1.4 指针加法
int main()
{	int vector[] = { 28,41,7 };
	char vector_[] = { 'a','b','c' };
	int* pi = vector; //指针变量存放数组第一个元素的地址
	char* pi_ = vector_;
	printf("%p\n", pi);
	pi++;//pi加上一个整数实际上加的数是这个整数和指针数据类型对应字节数的乘积
	printf("%p\n", pi);
//指针数据类型是字符指针
	printf("%p\n", pi_);
	pi_++;
	printf("%p\n", pi_);
	return 0;
}

//1.5 指针减法
int main()
{
	//指针减法可以表示索引之差
	char vector[] = { 'a','b','c' };
	char* p0 = vector;
	char* p1 = vector + 1;
	char* p2 = vector + 2;
	printf("p2-p0 = %d\n", p2 - p0);
	printf("p2-p1 = %d\n", p2 - p1);
	printf("%c %c %c", *p0, *p1, *p2);
	return 0;
}
C语言的功能强大且丰富，表现在const关键字与指针的结合使用上，对不同的问题，它提供不同的保护，我们可以看到如何使用这种技术阻止函数的
使用者修改函数的参数。
1 指向常量的指针
2 指向非常量的常量指针
3 指向常量的常量指针
4 指向“指向常量的常量指针”的指针
//1 把指针定义为指向常量，这意味者不能通过的指针修改它所引用的值。
例如
int num = 5;
const int limit = 500 ;
int* pi;//指向整数
const int *pci;//指向整数常量
pi = &num;
pci = &limit;//这意味者pci引用的值是只读的
pci = &num ;//指针可以存放int型整数，但是不同用pci来修改

//2
int *const cpi =&num;//cpi必须被初始化为指向非常量变量。cpi是不可修改的，cpi指向的数据可以修改。

//3
const int * const cpci = &limit;//指向常量的指针很少派上用场，因为这种指针本身不可修改，它指向的数据也不能通过它来修改。
必须初始化

//4
const int limit  = 500;
const int * const cpci = &limit;
const int* const* pcpci = &cpci;
从右往左读可以帮助我们理解这个声明：pcpci是指针变量名，它指向const，*const是常量指针，它指向const int。
printf("%d\n",*cpci);
printf("%d\n",**pcpci);//他们的结果应该都是500.
