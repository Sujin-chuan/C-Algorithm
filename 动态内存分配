1、malloc函数
操作对象是堆上分配的内存，malloc函数参数指定分配的字节数，如果成功，它会返回堆上分配的内存的指针。如果失败返回空指针。

只展示main函数部分代码
int* p  = (int*)malloc(sizeof(int));

分配内存时，堆管理器维护的数据结构中会保存额外的信息，它可能在内存的后面，实际的位置和原始信息取决与编译器。
char* pc = (char*)malloc(6);
for(int i =0; i<8; i++){
    *pc[i] = 0;
}//我们为分配了六个字节的空间，并把它的地址放在pc里面
该函数越过字符串的边界写入，额外的内存中的数据会损坏。

如果不使用free函数及时释放malloc函数分配的内存的话，会导致内存泄漏

初始化静态或全局变量时不能调用函数，静态变量可以先声明在分配。

2、calloc函数
callo函数在分配的同时清空内存(将其内容置为二进制0）。函数原型如下
void* calloc(size_t numElements, size_t elementSize);
执行calloc可能比执行malloc函数慢。

3、realloc函数



